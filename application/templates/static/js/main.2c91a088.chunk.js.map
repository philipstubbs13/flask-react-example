{"version":3,"sources":["data/data.csv","js/constants.js","js/utils.js","js/app.js","App.js","index.js"],"names":["module","exports","axisLabels","margin","top","right","bottom","left","chartWidth","chartHeight","xScale","data","chosenXAxis","d3","domain","d","range","yScale","chosenYAxis","renderCircles","circlesGroup","newXScale","newYScale","transition","duration","attr","updateToolTip","xLabel","chooseXLabel","yLabel","chooseYLabel","toolTip","tip","offset","html","state","call","on","show","this","index","hide","createXAxisLabel","xaxisLabelsGroup","y","value","activeClass","active","text","append","classed","createYAxisLabel","yaxisLabelsGroup","renderCirclesText","circlesText","drawScatterPlot","csvData","chartGroup","then","err","forEach","poverty","healthcare","smokes","obesity","age","income","xLinearScale","yLinearScale","bottomAxis","leftAxis","xAxis","yAxis","selectAll","enter","abbr","povertyLabel","ageLabel","incomeLabel","healthcareLabel","obesityLabel","smokesLabel","renderXAxis","renderYAxis","catch","error","console","log","window","App","useEffect","className","id","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c91a088.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.95022953.csv\";","export const axisLabels = {\r\n  age: 'age',\r\n  poverty: 'poverty',\r\n  income: 'income',\r\n  healthcare: 'healthcare',\r\n  obesity: 'obesity',\r\n  smokes: 'smokes'\r\n}\r\n\r\nexport const svgWidth = 1000;\r\nexport const svgHeight = 600;\r\n\r\nexport const margin = {\r\n  top: 20,\r\n  right: 40,\r\n  bottom: 100,\r\n  left: 190\r\n};\r\n\r\nexport const chartWidth = svgWidth - margin.left - margin.right;\r\nexport const chartHeight = svgHeight - margin.top - margin.bottom;","// @ts-nocheck\r\nimport * as d3 from 'd3';\r\nimport tip from 'd3-tip';\r\nimport { axisLabels } from './constants';\r\n\r\n// Function used for updating x-scale variable when clicking on the x-axis label.\r\nexport const xScale = (data, chosenXAxis, chartWidth) => {\r\n  // create scales\r\n  const xLinearScale = d3.scaleLinear()\r\n      .domain([d3.min(data, d => d[chosenXAxis]) * 0.8, d3.max(data, d => d[chosenXAxis]) * 1.2])\r\n      .range([0, chartWidth]);\r\n\r\n  return xLinearScale;\r\n}\r\n\r\n// Function used for updating y-scale variable when clicking on the y-axis label.\r\nexport const yScale = (data, chosenYAxis, chartHeight) => {\r\n  // create scales\r\n  const yLinearScale = d3.scaleLinear()\r\n      .domain(d3.extent(data, d => d[chosenYAxis]))\r\n      .range([chartHeight, 0]);\r\n\r\n  return yLinearScale;\r\n}\r\n\r\n\r\n// Function used for updating x-axis when clicking on the x-axis label.\r\nexport const renderXAxis = (newXScale, xAxis) => {\r\n  const bottomAxis = d3.axisBottom(newXScale);\r\n\r\n  xAxis.transition()\r\n    .duration(1000)\r\n    .call(bottomAxis);\r\n\r\n  return xAxis;\r\n}\r\n\r\n// Function used for updating y-axis when clicking on the y-axis label.\r\nexport const renderYAxis = (newYScale, yAxis) => {\r\n  const leftAxis = d3.axisLeft(newYScale);\r\n\r\n  yAxis.transition()\r\n    .duration(1000)\r\n    .call(leftAxis);\r\n\r\n  return yAxis;\r\n}\r\n\r\n\r\n// Function used for updating circles group with a transition to new circles.\r\nexport const renderCircles = (circlesGroup, newXScale, chosenXAxis, newYScale, chosenYAxis) => {\r\n\r\n  circlesGroup.transition()\r\n    .duration(2000)\r\n    .attr(\"cx\", d => newXScale(d[chosenXAxis]))\r\n    .attr(\"cy\", d => newYScale(d[chosenYAxis]))\r\n\r\n  return circlesGroup;\r\n}\r\n\r\n// Function used for updating circles group with new tooltip.\r\nexport const updateToolTip = (chosenXAxis, chosenYAxis, circlesGroup) => {\r\n\r\n  const xLabel = chooseXLabel(chosenXAxis);\r\n\r\n  const yLabel = chooseYLabel(chosenYAxis);\r\n\r\n  const toolTip = tip()\r\n    .attr(\"class\", \"d3-tip\")\r\n    .offset([80, -60])\r\n    .html(function(d) {\r\n      return (`${d.state}<br>${xLabel} ${d[chosenXAxis]}<br>${yLabel} ${d[chosenYAxis]}`);\r\n    });\r\n\r\n  circlesGroup.call(toolTip);\r\n\r\n  circlesGroup.on(\"mouseover\", function(d) { \r\n    // d3.select(this)\r\n    //   .transition()\r\n    //   .duration(1000)\r\n    //   .attr(\"r\", 20)\r\n    //   .attr(\"fill\", \"lightblue\");\r\n    toolTip.show(d, this);\r\n  })\r\n    .on(\"mouseout\", function(data, index) {\r\n      // d3.select(this)\r\n      //   .transition()\r\n      //   .duration(1000)\r\n      //   .attr(\"r\", 10)\r\n      //   .attr(\"fill\", \"blue\");\r\n      toolTip.hide(data);\r\n    });\r\n\r\n  return circlesGroup;\r\n}\r\n\r\n// Function used to determine which x-axis label to display inside the tooltip.\r\nexport const chooseXLabel = (chosenXAxis) => {\r\n  switch(chosenXAxis) {\r\n    case axisLabels.income:\r\n      return \"Household Income:\";\r\n    case axisLabels.poverty:\r\n      return \"Poverty:\";\r\n    case axisLabels.age:\r\n      return\"Age:\";\r\n    default:\r\n      return \"Poverty:\";\r\n  }\r\n}\r\n\r\n// Function used to determine which y-axis label to display inside the tooltip.\r\nexport const chooseYLabel = (chosenYAxis) => {\r\n  switch(chosenYAxis) {\r\n    case axisLabels.healthcare:\r\n      return \"Healthcare:\";\r\n    case axisLabels.obesity:\r\n      return \"Obese:\";\r\n    case axisLabels.smokes:\r\n      return \"Smokes:\";\r\n    default:\r\n      return \"Healthcare:\";\r\n  }\r\n}\r\n\r\n// Function used to create x-axis label.\r\nexport const createXAxisLabel = (xaxisLabelsGroup, y, value, activeClass, active, text) => {\r\n  const label = xaxisLabelsGroup.append(\"text\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", y)\r\n    .attr(\"value\", value)\r\n    .classed(activeClass, active)\r\n    .text(text);\r\n  \r\n  return label;\r\n}\r\n\r\n// Function used to create y-axis label.\r\nexport const createYAxisLabel = (yaxisLabelsGroup, margin, y, chartHeight, value, activeClass, active, text) => {\r\n  const label = yaxisLabelsGroup.append(\"text\")\r\n    .attr(\"y\", 0 - margin.left + y)\r\n    .attr(\"x\", 0 - (chartHeight / 2))\r\n    .attr(\"dy\", \"1em\")\r\n    .attr(\"value\", value)\r\n    .classed(activeClass, active)\r\n    .text(text);\r\n\r\n  return label;\r\n}\r\n\r\n// Function used to render/update the states circle text.\r\nexport const renderCirclesText = (circlesText, newXScale, newYScale, chosenXAxis, chosenYAxis) => {\r\n  circlesText\r\n      .transition()\r\n      .duration(3000)\r\n      .attr(\"x\", d => newXScale(d[chosenXAxis]))\r\n      .attr(\"y\", d => newYScale(d[chosenYAxis]))\r\n\r\n  return circlesText;\r\n}\r\n","import * as d3 from 'd3';\r\nimport { xScale, yScale, renderXAxis, renderYAxis, renderCircles, updateToolTip, createXAxisLabel, createYAxisLabel, renderCirclesText } from './utils';\r\nimport { axisLabels, svgHeight, svgWidth, margin, chartHeight, chartWidth } from './constants';\r\n\r\nexport const drawScatterPlot = (csvData) => {\r\n\r\n  // Choose the initial x-axis and y-axis to display.\r\n  let chosenXAxis = axisLabels.poverty;\r\n  let chosenYAxis = axisLabels.healthcare;\r\n\r\n  // Create an SVG wrapper, append an SVG group that will hold the chart,\r\n  // and shift the latter by left and top margins.\r\n  const svg = d3.select(\"#scatter\")\r\n    .append(\"svg\")\r\n    .attr(\"class\", \"svg\")\r\n    .attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`)\r\n  // using viewBox is what makes the svg/chart responsive:\r\n  // https://medium.com/@louisemoxy/a-simple-way-to-make-d3-js-charts-svgs-responsive-7afb04bc2e4b\r\n\r\n\r\n  // Append an SVG group.\r\n  const chartGroup = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n  // Retrieve data from the CSV file and execute everything below.\r\n  d3.csv(csvData).then(function(data, err) {\r\n    if (err) throw err;\r\n\r\n    // Parse data/cast as numbers.\r\n    data.forEach((data) => {\r\n      data.poverty = +data.poverty;\r\n      data.healthcare = +data.healthcare;\r\n      data.smokes = +data.smokes;\r\n      data.obesity = +data.obesity;\r\n      data.age = +data.age;\r\n      data.income = +data.income;\r\n    });\r\n\r\n    // Create scale functions.\r\n    let xLinearScale = xScale(data, chosenXAxis, chartWidth);\r\n    let yLinearScale = yScale(data, chosenYAxis, chartHeight);\r\n\r\n    // Create initial axis functions.\r\n    const bottomAxis = d3.axisBottom(xLinearScale);\r\n    const leftAxis = d3.axisLeft(yLinearScale);\r\n\r\n    // Append axes to the chart.\r\n    let xAxis = chartGroup.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${chartHeight})`)\r\n      .call(bottomAxis);\r\n\r\n    let yAxis = chartGroup.append(\"g\")\r\n      .call(leftAxis);\r\n\r\n    let circlesGroup = chartGroup.selectAll(\"circle\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"cx\", d => xLinearScale(d[chosenXAxis]))\r\n      .attr(\"cy\", d => yLinearScale(d[chosenYAxis]))\r\n      .attr(\"r\", \"15\")\r\n      .attr(\"fill\", \"blue\")\r\n      .attr(\"opacity\", \".5\")\r\n\r\n    let circlesText = chartGroup.selectAll(\"text.text-circles\")\r\n     .data(data)\r\n     .enter()\r\n     .append(\"text\")\r\n     .classed(\"text-circles\",true)\r\n     .text(d => d.abbr)\r\n     .attr(\"x\", d => xLinearScale(d[chosenXAxis]))\r\n     .attr(\"y\", d => yLinearScale(d[chosenYAxis]))\r\n     .attr(\"dy\",5)\r\n     .attr(\"text-anchor\",\"middle\")\r\n     .attr(\"font-size\",\"10px\")\r\n\r\n\r\n    // Create group for x-axis labels.\r\n    const xaxisLabelsGroup = chartGroup.append(\"g\")\r\n      .attr(\"transform\", `translate(${chartWidth / 2}, ${chartHeight + 20})`);\r\n\r\n    // Create the x-axis labels.\r\n    const povertyLabel = createXAxisLabel(xaxisLabelsGroup, 20, axisLabels.poverty, \"active\", true, \"In Poverty (%)\");\r\n    const ageLabel = createXAxisLabel(xaxisLabelsGroup, 40, axisLabels.age, \"inactive\", true, \"Age (Median)\");\r\n    const incomeLabel = createXAxisLabel(xaxisLabelsGroup, 60, axisLabels.income, \"inactive\", true, \"Household Income (Median)\");\r\n\r\n    // Create group for y-axis labels.\r\n    const yaxisLabelsGroup = chartGroup.append(\"g\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n\r\n    // Create the y-axis labels.\r\n    const healthcareLabel = createYAxisLabel(yaxisLabelsGroup, margin, 125, chartHeight, axisLabels.healthcare, \"active\", true, \"Lacks Healthcare (%)\");\r\n    const obesityLabel = createYAxisLabel(yaxisLabelsGroup, margin, 100, chartHeight, axisLabels.obesity, \"inactive\", true, \"Obese (%)\");\r\n    const smokesLabel = createYAxisLabel(yaxisLabelsGroup, margin, 75, chartHeight, axisLabels.smokes, \"inactive\", true, \"Smokes (%)\");\r\n\r\n    // Create/update tooltip for each circle in the circles group.\r\n    circlesGroup = updateToolTip(chosenXAxis, chosenYAxis, circlesGroup);\r\n\r\n\r\n    // Event listener for when an x-axis label is clicked.\r\n    xaxisLabelsGroup.selectAll(\"text\")\r\n      .on(\"click\", function() {\r\n        // Get value of selection.\r\n        const value = d3.select(this).attr(\"value\");\r\n        if (value !== chosenXAxis) {\r\n\r\n          // Replaces chosenXAxis with value.\r\n          chosenXAxis = value;\r\n\r\n          // Updates x scale for new data.\r\n          xLinearScale = xScale(data, chosenXAxis, chartWidth);\r\n\r\n          // Updates x-axis with transition.\r\n          xAxis = renderXAxis(xLinearScale, xAxis);\r\n\r\n          // updates circles with new x values.\r\n          circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis, yLinearScale, chosenYAxis);\r\n\r\n          // Updates circles text.\r\n          circlesText = renderCirclesText(circlesText, xLinearScale, yLinearScale, chosenXAxis, chosenYAxis);\r\n\r\n          // Updates tooltips with new info.\r\n          circlesGroup = updateToolTip(chosenXAxis, chosenYAxis, circlesGroup);\r\n\r\n          // Changes classes to change bold text.\r\n          switch(chosenXAxis) {\r\n            case axisLabels.income:\r\n              povertyLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              ageLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              incomeLabel\r\n                .classed(\"active\", true)\r\n                .classed(\"inactive\", false);\r\n            break;\r\n            case axisLabels.poverty:\r\n              povertyLabel\r\n                .classed(\"active\", true)\r\n                .classed(\"inactive\", false);\r\n              ageLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              incomeLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              break;\r\n            case axisLabels.age:\r\n              povertyLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              ageLabel\r\n                .classed(\"active\", true)\r\n                .classed(\"inactive\", false);\r\n              incomeLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              break;\r\n            default:\r\n              povertyLabel\r\n                .classed(\"active\", true)\r\n                .classed(\"inactive\", false);\r\n              ageLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n              incomeLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Event listener for when y-axis label is clicked.\r\n      yaxisLabelsGroup.selectAll(\"text\")\r\n        .on(\"click\", function() {\r\n          // Get value of selection.\r\n          const value = d3.select(this).attr(\"value\");\r\n          if (value !== chosenYAxis) {\r\n\r\n            // Replaces chosenYAxis with value.\r\n            chosenYAxis = value;\r\n\r\n            // Updates y scale for new data.\r\n            yLinearScale = yScale(data, chosenYAxis, chartHeight);\r\n\r\n            // Updates x-axis with transition.\r\n            yAxis = renderYAxis(yLinearScale, yAxis);\r\n\r\n            // Updates circles with new x values.\r\n            circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis, yLinearScale, chosenYAxis);\r\n\r\n            // Updates tooltips with new info.\r\n            circlesGroup = updateToolTip(chosenXAxis, chosenYAxis, circlesGroup);\r\n\r\n            // Updates circles text.\r\n            circlesText = renderCirclesText(circlesText, xLinearScale, yLinearScale, chosenXAxis, chosenYAxis);\r\n\r\n            // Change classes to change bold text for y-axis labels.\r\n            switch(chosenYAxis) {\r\n              case axisLabels.healthcare:\r\n                healthcareLabel\r\n                  .classed(\"active\", true)\r\n                  .classed(\"inactive\", false);\r\n                obesityLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                smokesLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                break;\r\n              case axisLabels.obesity:\r\n                healthcareLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                obesityLabel\r\n                  .classed(\"active\", true)\r\n                  .classed(\"inactive\", false);\r\n                smokesLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                break;\r\n              case axisLabels.smokes:\r\n                healthcareLabel\r\n                .classed(\"active\", false)\r\n                .classed(\"inactive\", true);\r\n                obesityLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                smokesLabel\r\n                  .classed(\"active\", true)\r\n                  .classed(\"inactive\", false);\r\n                break;\r\n              default:\r\n                healthcareLabel\r\n                  .classed(\"active\", true)\r\n                  .classed(\"inactive\", false);\r\n                obesityLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n                smokesLabel\r\n                  .classed(\"active\", false)\r\n                  .classed(\"inactive\", true);\r\n            }\r\n          }\r\n        });\r\n  }).catch((error) => console.log(error));\r\n}\r\n\r\n// Event listener for window resize.\r\n// When the browser window is resized, drawScatterPlot() is called.\r\nd3.select(window).on(\"resize\", drawScatterPlot);","import React, { useEffect } from 'react';\nimport './css/d3Style.css';\nimport './css/style.css';\nimport { drawScatterPlot } from './js/app.js';\nimport csvData from './data/data.csv';\n\nexport default function App() {\n\n  useEffect(() => {\n    drawScatterPlot(csvData);\n  }, [])\n\n  return (   \n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-md-12 d-flex justify-content-center mt-5\">\n          <h1>D3 Data Journalism</h1>\n          <br></br>\n        </div>\n      </div>\n      <div id=\"scatter\">\n      </div>\n      <div className=\"row d-flex justify-content-center\">\n        <div className=\"col-xs-12  col-md-9 mt-4\">\n          <div className=\"article\">\n            <h2 className=\"mb-3\">Correlations Discovered Between Health Risks and Age, Income</h2>\n            <p>\n              This visualization, built using D3, shows the health risks facing particular demographics across different states in the U.S. (for example, access to healthcare vs median household income). To compare different factors or data variables, you can click on the x and/or y labels to change the view of the visualization.\n            </p>\n\n            <p>\n              Each circle on the visualization represents a different state in the U.S. To see the actual values for a particular state, you can hover over the circle for that state to see a tooltip, which contains the actual data values based on the currently selected x and y axis labels. The tooltip was created using d3-tip, a plugin developed by <a href=\"https://github.com/Caged\" target=\"_blank\" rel=\"noopener noreferrer\">Justin Palmer</a>.\n            </p>\n\n            <p>\n              The dataset used for this project is based on 2014 ACS 1-year estimates. It includes data on rates of income, obesity, poverty, etc. by state. The information comes from the <a href=\"https://data.census.gov/cedsci/\" target=\"_blank\" rel=\"noopener noreferrer\">U.S. Census Bureau</a> and the Behavioral Risk Factor Surveillance System.\n            </p>\n            <p>\n              The code for this project is available on <a href=\"https://github.com/philipstubbs13/D3-challenge\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}